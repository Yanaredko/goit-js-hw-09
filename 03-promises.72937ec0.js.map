{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEAC,SAASC,iBAAiB,oBAAoB,WAC5C,MAAMC,EAAOF,SAASG,cAAc,SA6BpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CApCbJ,EAAKD,iBAAiB,UAAU,SAAUY,GACxCA,EAAEC,iBAEF,MAAMC,EAAab,EAAKC,cAAc,uBAChCa,EAAYd,EAAKC,cAAc,sBAC/Bc,EAAcf,EAAKC,cAAc,wBAEjCe,EAAeC,SAASJ,EAAWK,OACnCC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAEpC,GAAIG,MAAML,IAAiBK,MAAMF,IAASE,MAAMD,GAC9CE,EAAA1B,GAAS2B,OAAOC,QAAQ,sDAI1B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAG,EAC9BvB,EAAcuB,EAAGT,GAAgBS,EAAI,GAAKN,GACvCO,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA1B,GAAS2B,OAAOI,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAEzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA1B,GAAS2B,OAAOC,QAAQ,sBAAoBrB,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (e) {\n    e.preventDefault();\n\n    const delayInput = form.querySelector('input[name=\"delay\"]');\n    const stepInput = form.querySelector('input[name=\"step\"]');\n    const amountInput = form.querySelector('input[name=\"amount\"]');\n\n    const initialDelay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    if (isNaN(initialDelay) || isNaN(step) || isNaN(amount)) {\n      Notiflix.Notify.failure('Please fill in all fields with valid numbers.');\n      return;\n    }\n\n    for (let i = 1; i <= amount; i+=1) {\n      createPromise(i, initialDelay + (i - 1) * step)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  });\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","document","addEventListener","form","querySelector","createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","e","preventDefault","delayInput","stepInput","amountInput","initialDelay","parseInt","value","step","amount","isNaN","$parcel$interopDefault","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.72937ec0.js.map"}